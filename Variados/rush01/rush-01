#include <unistd.h>

#define SIZE 4

int* grid[SIZE];

void print_grid() {
    int i = 0;
    while (i < SIZE) {
        int j = 0;
        while (j < SIZE) {
            char c = grid[i][j] + '0';
            write(1, &c, 1);
            write(1, " ", 1);
            j++;
        }
        write(1, "\n", 1);
        i++;
    }
}

int is_valid(int row, int column, int box) {
    int i = 0;
    while (i < SIZE) {
        if (grid[row][i] == box || grid[i][column] == box) {
            return 0;
        }
        i++;
    }

    int view_row = row - row % 2;
    int view_column = column - column % 2;
    int i2 = 0;
    while (i2 < 2) {
        int j = 0;
        while (j < 2) {
            if (grid[view_row + i2][view_column + j] == box) {
                return 0;
            }
            j++;
        }
        i2++;
    }

    return 1;
}

void solve(int row, int column) {
    if (row == SIZE) {
        print_grid();
        return;
    }

    if (column == SIZE) {
        solve(row + 1, 0);
        return;
    }

    int i = 1;
    while (i <= SIZE) {
        if (is_valid(row, column, i)) {
            grid[row][column] = i;
            solve(row, column + 1);
            // Backtrack if the solution is not valid
            grid[row][column] = 0;
        }
        i++;
    }
}

int main(int argc, char* argv[]) {
    int i = 0;
    while (i < SIZE) {
        grid[i] = (int*) malloc(SIZE * sizeof(int));
        i++;
    }

    solve(0, 0);

    i = 0;
    while (i < SIZE) {
        free(grid[i]);
        i++;
    }

    return 0;
}